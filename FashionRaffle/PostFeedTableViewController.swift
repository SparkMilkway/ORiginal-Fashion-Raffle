//
//  SocialTableViewController.swift
//  FashionRaffle
//
//  Created by Spark Da Capo on 3/14/17.
//  Copyright Â© 2017 Mac. All rights reserved.
//

import Foundation
import UIKit
import Firebase
import SVProgressHUD
import Imaginary
import ESPullToRefresh

class PostFeedTableViewController: UITableViewController {
    
    var postFeeds: [Post] = []
    let postRef = FIRDatabase.database().reference().child("Posts")
    
    var currentLoad : UInt = 5
    var singleLoadLimit: UInt = 2
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        tableView.reloadData()
    }
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        tableView.allowsSelection = false

        
        loadAttributes()
        
        self.tableView.es_addPullToRefresh {
            self.loadRowsFromTop()
        }
        self.tableView.es_addInfiniteScrolling {
            self.loadMore()
        }

    }
    
    
    // Refresh, load more and so on
    
    func loadAttributes() {
        postFeeds.removeAll()
        // query limited to last int m will return the most recent m items (if generated by autoID)
        
        ref.child("Posts").queryOrderedByKey().queryLimited(toLast: self.currentLoad).observe(.childAdded, with: {
            snapshot in
            guard let postFeed = snapshot.value as? [String:Any] else{
                return
            }

            let postID = snapshot.key
            let new = Post.initWithPostID(postID: postID, postDict: postFeed)
            self.postFeeds.insert(new!, at: 0)
            DispatchQueue.main.async {
                
                self.tableView.reloadData()
                
                ref.child("Posts").removeAllObservers()
                
            }
        }, withCancel:{
            error in
            print(error.localizedDescription)
        })
    }
    
    func loadRowsFromTop() {
        ref.child("Posts").queryLimited(toLast: 1).observeSingleEvent(of: .value, with: {
            snapshot in
            guard let checkLatestPosts = snapshot.value as? [String:[String:Any]] else {
                print("Fetch latest Raffle Feed failed")
                return
            }
            for (postID, _) in checkLatestPosts {
                
                let checkID = self.postFeeds[0].postID
                if postID == checkID {
                    // There is no new post data, no need to fetch all the news once again
                    print("No new post feeds")
                    DispatchQueue.main.asyncAfter(deadline: DispatchTime.now()+0.3, execute: {
                        self.tableView.es_stopPullToRefresh()
                        
                    })
                    return
                }
            }
            //Load new raffle data from here
            print("Will load more from top")
            self.postFeeds.removeAll()
            ref.child("Posts").queryOrderedByKey().queryLimited(toLast: self.currentLoad).observe(.childAdded, with: {
                snapshot in
                guard let postFeed = snapshot.value as? [String:Any] else{
                    return
                }
                let postID = snapshot.key
                let new = Post.initWithPostID(postID: postID, postDict: postFeed)
                self.postFeeds.insert(new!, at: 0)
                DispatchQueue.main.async {
                    
                    self.tableView.reloadData()
                    self.tableView.es_stopPullToRefresh()
                    ref.child("Posts").removeAllObservers()
                    
                }
            }, withCancel:{
                error in
                print(error.localizedDescription)
            })
            
        }, withCancel:{
            error in
            print(error.localizedDescription)
        })
        
    }
    
    func loadMore() {
        
        //Still more data
        if currentLoad <= UInt(postFeeds.count) {
            currentLoad = currentLoad + singleLoadLimit
            let checkCount = self.postFeeds.count
            self.postFeeds.removeAll()
            
            var fetchCount:UInt = 0
            ref.child("Posts").queryLimited(toLast: self.currentLoad).observeSingleEvent(of: .value, with: {
                snapshot in
                fetchCount = snapshot.childrenCount
                //Get the count actually
                //print(fetchCount)
            })
            
            ref.child("Posts").queryOrderedByKey().queryLimited(toLast: self.currentLoad).observe(.childAdded, with: {
                snapshot in
                guard let postFeed = snapshot.value as? [String:Any] else{
                    return
                }
                
                let postID = snapshot.key
                let new = Post.initWithPostID(postID: postID, postDict: postFeed)
                self.postFeeds.insert(new!, at: 0)
                // When fetched all the data
                if self.postFeeds.count == Int(fetchCount) {
                    //print(self.postFeeds.count)
                    if self.postFeeds.count > checkCount {
                        // Has more data
                        print("Has more data")
                        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now()+0.1, execute: {
                            
                            self.tableView.reloadData()
                            self.tableView.es_stopLoadingMore()
                            ref.child("Posts").removeAllObservers()
                            return
                        })
                    }
                    else {
                        print("No more data now")
                        DispatchQueue.main.async {
                            self.tableView.es_noticeNoMoreData()
                            ref.child("Posts").removeAllObservers()
                            return
                        }
                    }
                }
            }, withCancel:{
                error in
                print(error.localizedDescription)
            })
            // No more data actually
        }
        else {
            //No more data
            print("No more data to load")
            DispatchQueue.main.asyncAfter(deadline: DispatchTime.now()+0.3, execute: {
                self.tableView.es_noticeNoMoreData()
            })
            
        }
        
    }

    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 1
    }
    override func numberOfSections(in tableView: UITableView) -> Int {
        return self.postFeeds.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let post = self.postFeeds[indexPath.section]
        let cell = tableView.dequeueReusableCell(withIdentifier: "PostCell") as! PostPoolCell
        cell.captionLabel.text = post.caption
        let imageUrl = post.imageUrl
        
        cell.loadingIndicator.startAnimating()
        
        cell.imgView.setImage(url: imageUrl){
            _ in
            cell.loadingIndicator.stopAnimating()
        }
        cell.userNameLabel.text = post.creator
        cell.timeStamp.text = post.timestamp
        cell.creatorID = post.creatorID
        
        API.userAPI.fetchUserProfilePicUrl(withID: post.creatorID, completion: {
            url in
            if let fetchUrl = url {
                // Has the url
                let userIcon = UIImage(named: "UserIcon")
                
                cell.profileImage.setImage(url: fetchUrl, placeholder: userIcon)
            }
            else {
                cell.profileImage.image = UIImage(named: "UserIcon")
            }
        })
        
        cell.viewProfile.layer.setValue(indexPath, forKey: "index")

        return cell
    }
    
    /*
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        let post = self.postFeeds[indexPath.section]
        let img = post.image
        let ratio = img.size.height/img.size.width
        return tableView.frame.size.width * ratio + 40
        
    }
    */
    func postIndex(cellIndex:Int) -> Int {
        return tableView.numberOfSections - cellIndex - 1
    }

    override func didReceiveMemoryWarning() {
        
    }
    
    @IBAction func viewProfile(_ sender: AnyObject) {
        let i = sender.layer.value(forKey: "index") as! IndexPath
        print (i)
        let cell = tableView.cellForRow(at: i) as! PostPoolCell
        guestname.append(cell.userNameLabel.text!)
        guestId.append(cell.creatorID)
        let guest = self.storyboard?.instantiateViewController(withIdentifier: "guestVC") as! guestVC
        self.navigationController?.pushViewController(guest, animated: true)
        
    }
    
    
    
}

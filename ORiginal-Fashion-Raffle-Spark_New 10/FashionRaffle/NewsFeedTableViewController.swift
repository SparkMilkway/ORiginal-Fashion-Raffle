//
//  NewsFeedTableViewController.swift
//  FashionRaffle
//
//  Created by Spark Da Capo on 11/15/16.
//  Copyright Â© 2016 Mac. All rights reserved.
//

import Foundation
import UIKit
import SVProgressHUD
import Cache
import Imaginary
import ESPullToRefresh

class NewsFeedTableViewController: UITableViewController, UISearchBarDelegate {
    
    var newsF : [NewsFeed] = []
    // search attributes
    //let searchBar = UISearchBar()
    var label : UILabel?
    let releaseAPI = API.releaseAPI
    var currentLoad : UInt = 4
    var singleLoadLimit: UInt = 2
    //var shouldFiltContents = false
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        let checkUser = API.authAPI.checkCurrentUser()
        if checkUser == false {
            print("User not signed in. Will go to log in page")
            SVProgressHUD.dismiss()
            if FBSDKAccessToken.current() != nil {
                FBSDKLoginManager().logOut()
            }
            
            let storyboard = UIStoryboard(name: "Start", bundle: nil)
            let loginVC = storyboard.instantiateViewController(withIdentifier: "SignInViewController") as! LoginViewController
            self.present(loginVC, animated: true, completion: nil)
            let appDelegate = UIApplication.shared.delegate as! AppDelegate
            appDelegate.window?.rootViewController = loginVC
        }
    }
    
    override var prefersStatusBarHidden: Bool {
        return false
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()

        label?.text = self.title
        navigationItem.rightBarButtonItem = UIBarButtonItem(image: #imageLiteral(resourceName: "search button"), style: .plain, target: self, action: #selector(self.searchTapped))
        self.tableView.es_addPullToRefresh {
            self.loadRowsFromTop()
        }
        self.tableView.es_addInfiniteScrolling {

            self.loadMore()
        }
        
        loadAttributes()

        
    }
    
    //Load Functionality
    
    func loadAttributes() {
        
        SVProgressHUD.show(withStatus: "Loading...")
        newsF.removeAll()
        // query limited to last int m will return the most recent m items (if generated by autoID)

        releaseAPI.fetchAllNews(withLimitToLast: self.currentLoad, completed: {
            fetchedNews in
            if let news = fetchedNews {
                self.newsF = news
            }
            DispatchQueue.main.async {
                SVProgressHUD.dismiss(withDelay: 0.2)
                self.tableView.reloadData()
            }
            
        })
    }
    
    func loadRowsFromTop() {
        // query limited to last int m will return the most recent m items (if generated by autoID)
        
        if let firstID = self.newsF[0].newsID {
            
            self.releaseAPI.checkNewNewsInTable(withFirstNewsID: firstID, completed: {
                checkNewValue in
                if checkNewValue == true {
                    print("Will fetch New value")
                    self.newsF.removeAll()
                    self.releaseAPI.fetchAllNews(withLimitToLast: self.currentLoad, completed: {
                        fetchNews in
                        if let news = fetchNews {
                            self.newsF = news
                            self.tableView.reloadData()
                            self.tableView.es_stopPullToRefresh()
                            return
                        }
                        else {
                            Config.showError(withStatus: "Loading Error!")
                            return
                        }
                        
                    })
                }
                
            })
        }
        print("No new News Data")
        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now()+0.3, execute: {
            self.tableView.es_stopPullToRefresh()
            return
        })
    }
    
    func loadMore() {
        //Still more data
        if currentLoad <= UInt(newsF.count) {
            currentLoad = currentLoad + singleLoadLimit
            let checkCount = self.newsF.count
            
            self.releaseAPI.fetchAllNews(withLimitToLast: self.currentLoad, completed: {
                allNews in
                if let tempNews = allNews {
                    if tempNews.count > checkCount {
                        print("Has More Data")
                        self.newsF.removeAll()
                        self.newsF = tempNews
                        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now()+0.1, execute: {
                            
                            self.tableView.reloadData()
                            self.tableView.es_stopLoadingMore()
                            return
                        })
                    }
                    else {
                        print("No new Data now")
                        DispatchQueue.main.async {
                            self.tableView.es_noticeNoMoreData()
                            return
                        }
                    }
                }
            })
        }
        else {
            //No more data
            print("No more data to load")
            DispatchQueue.main.asyncAfter(deadline: DispatchTime.now()+0.3, execute: {
                self.tableView.es_noticeNoMoreData()
            })
            
        }
    }
    
    //The function for search bar
    
    func searchTapped() {
        /*
         searchBar.delegate = self
         searchBar.tintColor = UIColor(red: 55/255, green: 183/255, blue: 255/255, alpha: 1)
         
         searchBar.isHidden = false
         searchBar.showsCancelButton = false
         searchBar.placeholder = "Explore your interest!"
         self.navigationItem.titleView = searchBar
         self.navigationItem.rightBarButtonItem = UIBarButtonItem(title: "Cancel", style: .plain, target: self, action: #selector(self.cancelsearch))
         */
    }
    
    //cancel the search if needed
    
    func cancelsearch() {
        /*
         searchBar.text = ""
         shouldFiltContents = false
         self.tableView.reloadData()
         searchBar.isHidden = true
         self.navigationItem.titleView = label
         self.navigationItem.backBarButtonItem = UIBarButtonItem(title: "Back", style: .plain, target: nil, action: nil)
         self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: #imageLiteral(resourceName: "search button"), style: .plain, target: self, action: #selector(self.searchTapped))
         */
    }
    
    
    // Function for search bar ends
    
    //Search Functions
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        /*
         self.filterednewsDatas = newsDatas.filter({content -> Bool in
         let title = content.title
         return title.lowercased().contains(searchText.lowercased())
         
         })
         if searchText != "" {
         shouldFiltContents = true
         self.tableView.reloadData()
         }
         else {
         shouldFiltContents = false
         self.tableView.reloadData()
         }
         */
        
    }
    
    
    
    //Search Functions end
    
    //Close Search Bar if needed
    
    override func scrollViewWillBeginDragging(_ scrollView: UIScrollView) {
        //searchBar.endEditing(true)
    }
    
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        /*searchBar.endEditing(true)
         shouldFiltContents = true
         self.tableView.reloadData()
         */
    }
    
    
    //Close search bar functions end
    
    
    func handleRefresh(refreshControl: UIRefreshControl) {
        
        /*
         self.tableView.reloadData()
         refreshControl.endRefreshing()
         */
    }
    
    
    //TableView Delegates
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = self.tableView.dequeueReusableCell(withIdentifier: "NewsCell", for: indexPath) as! NewsDataCell
        
        cell.releaseNews = self.newsF[indexPath.row]
        
        return cell

    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        let feed = self.newsF
        return feed.count
        
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        tableView.deselectRow(at: indexPath, animated: true)
        
        let newsCell = self.newsF[indexPath.row]
        
        let storyboard = UIStoryboard(name: "ReleaseNewsFeed", bundle: nil)
        let viewController = storyboard.instantiateViewController(withIdentifier: "ReleaseDetailVC") as! NewsReusableViewController
        viewController.news = newsCell
        //searchBar.endEditing(true)
        self.navigationController?.pushViewController(viewController, animated: true)
 
        print("CoolCool")
    }
    
    //TableView Delegates end
    
    
    //Search bar delegates
    
    /*
     func updateSearchResults(for searchController: UISearchController) {
     // updates
     filterContents(searchText: self.searchController.searchBar.text!)
     }
     */
    //Search Bar delegates end
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
    }
}

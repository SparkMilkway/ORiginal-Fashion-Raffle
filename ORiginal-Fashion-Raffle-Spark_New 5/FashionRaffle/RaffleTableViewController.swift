//
//  RaffleTableViewController.swift
//  FashionRaffle
//
//  Created by Spark Da Capo on 11/27/16.
//  Copyright Â© 2016 Mac. All rights reserved.
//

import Foundation
import UIKit
import Firebase
import Imaginary
import SVProgressHUD
import ESPullToRefresh

class RaffleTableViewController: UITableViewController {
    
    var raffleFeedDatas = [RaffleFeed]()
    let storageReference = FIRStorage.storage()
    let ref = FIRDatabase.database().reference()
    
    var currentLoad : UInt = 4
    var singleLoadLimit: UInt = 2
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)

    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        navigationItem.backBarButtonItem = UIBarButtonItem(title: "Back", style: .plain, target: nil, action: nil)
        
        
        loadAttributes()
        
        self.tableView.es_addPullToRefresh {
            self.loadRowsFromTop()
        }
        self.tableView.es_addInfiniteScrolling {
            self.loadMore()
        }
    }
    
    // Refresh, load more and so on

    func loadAttributes() {
        raffleFeedDatas.removeAll()
        // query limited to last int m will return the most recent m items (if generated by autoID)
        
        self.ref.child("Raffles").queryOrderedByKey().queryLimited(toLast: self.currentLoad).observe(.childAdded, with: {
            snapshot in
            guard let raffleFeed = snapshot.value as? [String:Any] else{
                return
            }
            
            
            
            let raffleID = snapshot.key
            let new = RaffleFeed.initWithRaffleID(raffleID: raffleID, contents: raffleFeed)
            self.raffleFeedDatas.insert(new!, at: 0)
            DispatchQueue.main.async {
                
                self.tableView.reloadData()
                
                self.ref.child("Raffles").removeAllObservers()
                
            }
        }, withCancel:{
            error in
            print(error.localizedDescription)
        })
    }
    
    
    func loadRowsFromTop() {
        ref.child("Raffles").queryLimited(toLast: 1).observeSingleEvent(of: .value, with: {
            snapshot in
            guard let checkLatestNews = snapshot.value as? [String:[String:Any]] else {
                print("Fetch latest Raffle Feed failed")
                return
            }
            for (raffleID, _) in checkLatestNews {

                let checkID = self.raffleFeedDatas[0].raffleID
                if raffleID == checkID {
                    // There is no new raffle data, no need to fetch all the news once again
                    print("No new raffle feeds")
                    DispatchQueue.main.asyncAfter(deadline: DispatchTime.now()+0.3, execute: {
                        self.tableView.es_stopPullToRefresh()
                        
                    })
                    return
                }
            }
            //Load new raffle data from here
            print("Will load more from top")
            self.raffleFeedDatas.removeAll()
            self.ref.child("Raffles").queryOrderedByKey().queryLimited(toLast: self.currentLoad).observe(.childAdded, with: {
                snapshot in
                guard let raffleFeed = snapshot.value as? [String:Any] else{
                    return
                }
                let raffleID = snapshot.key
                let new = RaffleFeed.initWithRaffleID(raffleID: raffleID, contents: raffleFeed)
                self.raffleFeedDatas.insert(new!, at: 0)
                DispatchQueue.main.async {
                    
                    self.tableView.reloadData()
                    self.tableView.es_stopPullToRefresh()
                    self.ref.child("Raffles").removeAllObservers()
                    
                }
            }, withCancel:{
                error in
                print(error.localizedDescription)
            })
            
        }, withCancel:{
            error in
            print(error.localizedDescription)
        })
        
    }
    
    func loadMore() {
        
        //Still more data
        if currentLoad <= UInt(raffleFeedDatas.count) {
            currentLoad = currentLoad + singleLoadLimit
            let checkCount = self.raffleFeedDatas.count
            self.raffleFeedDatas.removeAll()
            
            var fetchCount:UInt = 0
            ref.child("Raffles").queryLimited(toLast: self.currentLoad).observeSingleEvent(of: .value, with: {
                snapshot in
                fetchCount = snapshot.childrenCount
                //Get the count actually
                //print(fetchCount)
            })
            
            ref.child("ReleaseNews").queryOrderedByKey().queryLimited(toLast: self.currentLoad).observe(.childAdded, with: {
                snapshot in
                guard let raffleFeed = snapshot.value as? [String:Any] else{
                    return
                }
                
                let raffleID = snapshot.key
                let new = RaffleFeed.initWithRaffleID(raffleID: raffleID, contents: raffleFeed)
                self.raffleFeedDatas.insert(new!, at: 0)
                // When fetched all the data
                if self.raffleFeedDatas.count == Int(fetchCount) {
                    //print(self.newsF.count)
                    if self.raffleFeedDatas.count > checkCount {
                        // Has more data
                        print("Has more data")
                        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now()+0.1, execute: {
                            
                            self.tableView.reloadData()
                            self.tableView.es_stopLoadingMore()
                            self.ref.child("Raffles").removeAllObservers()
                            return
                        })
                    }
                    else {
                        print("No more data now")
                        DispatchQueue.main.async {
                            self.tableView.es_noticeNoMoreData()
                            self.ref.child("Raffles").removeAllObservers()
                            return
                        }
                    }
                }
            }, withCancel:{
                error in
                print(error.localizedDescription)
            })
            // No more data actually
        }
        else {
            //No more data
            print("No more data to load")
            DispatchQueue.main.asyncAfter(deadline: DispatchTime.now()+0.3, execute: {
                self.tableView.es_noticeNoMoreData()
            })
            
        }
        
    }
    
    
    
    
    override func didReceiveMemoryWarning() {
        
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.raffleFeedDatas.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = self.tableView.dequeueReusableCell(withIdentifier: "RaffleMainCell", for: indexPath) as! RafflePoolCell
        
        
        let raffledata = raffleFeedDatas[indexPath.row]
        let imageURL = raffledata.headImageUrl
        cell.CellImage.setImage(url: imageURL)
        cell.Title!.text = raffledata.title
        cell.Subtitle!.text = raffledata.subtitle
        return cell
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        print("Hooray!")
        /*
        let raffledata = self.raffleFeedDatas[indexPath.row]
        let storyboard = UIStoryboard(name: "FirstDemo", bundle: nil)
        let viewController = storyboard.instantiateViewController(withIdentifier: "RaffleReusableView") as! RaffleReusableViewController

        
        viewController.title = raffledata.title
        let imageURL = raffledata.image1
        let storage = self.storageReference.reference(forURL: imageURL)
        viewController.reference = storage
        viewController.passLabel = raffledata.title
        viewController.passDetail = raffledata.details
        viewController.passKey = raffledata.pathKey
        
        self.navigationController?.pushViewController(viewController, animated: true)
        */
    }
    
}
